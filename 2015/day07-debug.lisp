
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::LS ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::LF) (CIRCUIT::LQ)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "ls" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::JN ()
    (WHEN (NULL VALUE)
      (SETF VALUE (RSHIFT (CIRCUIT::IU) 1))
      (PRINC (FORMAT NIL "~A -> ~A~%" "jn" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::BV ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGIOR (CIRCUIT::BO) (CIRCUIT::BU)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "bv" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::HC ()
    (WHEN (NULL VALUE)
      (SETF VALUE (RSHIFT (CIRCUIT::GJ) 1))
      (PRINC (FORMAT NIL "~A -> ~A~%" "hc" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::EU ()
    (WHEN (NULL VALUE)
      (SETF VALUE (RSHIFT (CIRCUIT::ET) 2))
      (PRINC (FORMAT NIL "~A -> ~A~%" "eu" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::BY ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::BV) (CIRCUIT::BX)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "by" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::IU ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGIOR (CIRCUIT::IS) (CIRCUIT::IT)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "iu" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::O ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGIOR (CIRCUIT::B) (CIRCUIT::N)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "o" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::GG ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGIOR (CIRCUIT::GF) (CIRCUIT::GE)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "gg" VALUE)))
    VALUE)) 
(DEFUN CIRCUIT::KU () (MY-NOT (CIRCUIT::KT))) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::ED ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::EA) (CIRCUIT::EB)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "ed" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::KS ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGIOR (CIRCUIT::KL) (CIRCUIT::KR)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "ks" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::HL ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::HI) (CIRCUIT::HK)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "hl" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::AX ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::AU) (CIRCUIT::AV)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "ax" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::LG ()
    (WHEN (NULL VALUE)
      (SETF VALUE (RSHIFT (CIRCUIT::LF) 2))
      (PRINC (FORMAT NIL "~A -> ~A~%" "lg" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::DF ()
    (WHEN (NULL VALUE)
      (SETF VALUE (RSHIFT (CIRCUIT::DD) 3))
      (PRINC (FORMAT NIL "~A -> ~A~%" "df" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::FC ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::EU) (CIRCUIT::FA)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "fc" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::DI ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::DF) (CIRCUIT::DG)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "di" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::IT ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LSHIFT (CIRCUIT::IP) 15))
      (PRINC (FORMAT NIL "~A -> ~A~%" "it" VALUE)))
    VALUE)) 
(DEFUN CIRCUIT::EM () (MY-NOT (CIRCUIT::EL))) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::FF ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGIOR (CIRCUIT::ET) (CIRCUIT::FE)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "ff" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::FN ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LSHIFT (CIRCUIT::FJ) 15))
      (PRINC (FORMAT NIL "~A -> ~A~%" "fn" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::U ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGIOR (CIRCUIT::T) (CIRCUIT::S)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "u" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::MA ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGIOR (CIRCUIT::LY) (CIRCUIT::LZ)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "ma" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::KR ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::KO) (CIRCUIT::KQ)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "kr" VALUE)))
    VALUE)) 
(DEFUN CIRCUIT::FY () (MY-NOT (CIRCUIT::FX))) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::FM ()
    (WHEN (NULL VALUE)
      (SETF VALUE (RSHIFT (CIRCUIT::ET) 1))
      (PRINC (FORMAT NIL "~A -> ~A~%" "fm" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::FB ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGIOR (CIRCUIT::EU) (CIRCUIT::FA)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "fb" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::DE ()
    (WHEN (NULL VALUE)
      (SETF VALUE (RSHIFT (CIRCUIT::DD) 2))
      (PRINC (FORMAT NIL "~A -> ~A~%" "de" VALUE)))
    VALUE)) 
(DEFUN CIRCUIT::GP () (MY-NOT (CIRCUIT::GO))) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::KE ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::KB) (CIRCUIT::KD)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "ke" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::HI ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGIOR (CIRCUIT::HG) (CIRCUIT::HH)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "hi" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::KG ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LSHIFT (CIRCUIT::JM) 1))
      (PRINC (FORMAT NIL "~A -> ~A~%" "kg" VALUE)))
    VALUE)) 
(DEFUN CIRCUIT::CO () (MY-NOT (CIRCUIT::CN))) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::JQ ()
    (WHEN (NULL VALUE)
      (SETF VALUE (RSHIFT (CIRCUIT::JP) 2))
      (PRINC (FORMAT NIL "~A -> ~A~%" "jq" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::JS ()
    (WHEN (NULL VALUE)
      (SETF VALUE (RSHIFT (CIRCUIT::JP) 5))
      (PRINC (FORMAT NIL "~A -> ~A~%" "js" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::IP ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND 1 (CIRCUIT::IO)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "ip" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::ES ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LSHIFT (CIRCUIT::EO) 15))
      (PRINC (FORMAT NIL "~A -> ~A~%" "es" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::JK ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND 1 (CIRCUIT::JJ)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "jk" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::J ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::G) (CIRCUIT::I)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "j" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::CK ()
    (WHEN (NULL VALUE)
      (SETF VALUE (RSHIFT (CIRCUIT::CI) 3))
      (PRINC (FORMAT NIL "~A -> ~A~%" "ck" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::GQ ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::GN) (CIRCUIT::GP)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "gq" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::FV ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::FS) (CIRCUIT::FU)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "fv" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::LM ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::LJ) (CIRCUIT::LL)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "lm" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::JO ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LSHIFT (CIRCUIT::JK) 15))
      (PRINC (FORMAT NIL "~A -> ~A~%" "jo" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::IW ()
    (WHEN (NULL VALUE)
      (SETF VALUE (RSHIFT (CIRCUIT::IU) 3))
      (PRINC (FORMAT NIL "~A -> ~A~%" "iw" VALUE)))
    VALUE)) 
(DEFUN CIRCUIT::IJ () (MY-NOT (CIRCUIT::II))) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::CD ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND 1 (CIRCUIT::CC)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "cd" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::BP ()
    (WHEN (NULL VALUE)
      (SETF VALUE (RSHIFT (CIRCUIT::BN) 3))
      (PRINC (FORMAT NIL "~A -> ~A~%" "bp" VALUE)))
    VALUE)) 
(DEFUN CIRCUIT::GX () (MY-NOT (CIRCUIT::GW))) 
(DEFUN CIRCUIT::FU () (MY-NOT (CIRCUIT::FT))) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::JP ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGIOR (CIRCUIT::JN) (CIRCUIT::JO)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "jp" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::JC ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGIOR (CIRCUIT::IV) (CIRCUIT::JB)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "jc" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::HW ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGIOR (CIRCUIT::HV) (CIRCUIT::HU)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "hw" VALUE)))
    VALUE)) 
(DEFUN CIRCUIT::B () 16076) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::GM ()
    (WHEN (NULL VALUE)
      (SETF VALUE (RSHIFT (CIRCUIT::GJ) 5))
      (PRINC (FORMAT NIL "~A -> ~A~%" "gm" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::HT ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::HQ) (CIRCUIT::HS)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "ht" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::ER ()
    (WHEN (NULL VALUE)
      (SETF VALUE (RSHIFT (CIRCUIT::DY) 1))
      (PRINC (FORMAT NIL "~A -> ~A~%" "er" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::AP ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGIOR (CIRCUIT::AO) (CIRCUIT::AN)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "ap" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::LF ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGIOR (CIRCUIT::LD) (CIRCUIT::LE)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "lf" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::CE ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LSHIFT (CIRCUIT::BK) 1))
      (PRINC (FORMAT NIL "~A -> ~A~%" "ce" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::CC ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::BZ) (CIRCUIT::CB)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "cc" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::BM ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LSHIFT (CIRCUIT::BI) 15))
      (PRINC (FORMAT NIL "~A -> ~A~%" "bm" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::IO ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::IL) (CIRCUIT::IN)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "io" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::AI ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::AF) (CIRCUIT::AH)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "ai" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::BL ()
    (WHEN (NULL VALUE)
      (SETF VALUE (RSHIFT (CIRCUIT::AS) 1))
      (PRINC (FORMAT NIL "~A -> ~A~%" "bl" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::LH ()
    (WHEN (NULL VALUE)
      (SETF VALUE (RSHIFT (CIRCUIT::LF) 3))
      (PRINC (FORMAT NIL "~A -> ~A~%" "lh" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::ET ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGIOR (CIRCUIT::ER) (CIRCUIT::ES)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "et" VALUE)))
    VALUE)) 
(DEFUN CIRCUIT::AY () (MY-NOT (CIRCUIT::AX))) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::DB ()
    (WHEN (NULL VALUE)
      (SETF VALUE (RSHIFT (CIRCUIT::CI) 1))
      (PRINC (FORMAT NIL "~A -> ~A~%" "db" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::FG ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::ET) (CIRCUIT::FE)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "fg" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::LN ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGIOR (CIRCUIT::LG) (CIRCUIT::LM)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "ln" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::N ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::K) (CIRCUIT::M)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "n" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::IA ()
    (WHEN (NULL VALUE)
      (SETF VALUE (RSHIFT (CIRCUIT::HZ) 2))
      (PRINC (FORMAT NIL "~A -> ~A~%" "ia" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::LB ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LSHIFT (CIRCUIT::KH) 1))
      (PRINC (FORMAT NIL "~A -> ~A~%" "lb" VALUE)))
    VALUE)) 
(DEFUN CIRCUIT::EZ () (MY-NOT (CIRCUIT::EY))) 
(DEFUN CIRCUIT::DJ () (MY-NOT (CIRCUIT::DI))) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::EG ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGIOR (CIRCUIT::DZ) (CIRCUIT::EF)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "eg" VALUE)))
    VALUE)) 
(DEFUN CIRCUIT::A () (CIRCUIT::LX)) 
(DEFUN CIRCUIT::JA () (MY-NOT (CIRCUIT::IZ))) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::HD ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LSHIFT (CIRCUIT::GZ) 15))
      (PRINC (FORMAT NIL "~A -> ~A~%" "hd" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::CF ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGIOR (CIRCUIT::CE) (CIRCUIT::CD)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "cf" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::FT ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::FQ) (CIRCUIT::FR)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "ft" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::BB ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::AT) (CIRCUIT::AZ)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "bb" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::HB ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGIOR (CIRCUIT::HA) (CIRCUIT::GZ)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "hb" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::FX ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::FP) (CIRCUIT::FV)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "fx" VALUE)))
    VALUE)) 
(DEFUN CIRCUIT::GC () (MY-NOT (CIRCUIT::GB))) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::II ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::IA) (CIRCUIT::IG)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "ii" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::GN ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGIOR (CIRCUIT::GL) (CIRCUIT::GM)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "gn" VALUE)))
    VALUE)) 
(DEFUN CIRCUIT::C () 0) 
(DEFUN CIRCUIT::CB () (MY-NOT (CIRCUIT::CA))) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::CG ()
    (WHEN (NULL VALUE)
      (SETF VALUE (RSHIFT (CIRCUIT::BN) 1))
      (PRINC (FORMAT NIL "~A -> ~A~%" "cg" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::T ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LSHIFT (CIRCUIT::C) 1))
      (PRINC (FORMAT NIL "~A -> ~A~%" "t" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::IY ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGIOR (CIRCUIT::IW) (CIRCUIT::IX)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "iy" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::KH ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGIOR (CIRCUIT::KG) (CIRCUIT::KF)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "kh" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::EK ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGIOR (CIRCUIT::DY) (CIRCUIT::EJ)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "ek" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::KP ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::KM) (CIRCUIT::KN)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "kp" VALUE)))
    VALUE)) 
(DEFUN CIRCUIT::FD () (MY-NOT (CIRCUIT::FC))) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::IB ()
    (WHEN (NULL VALUE)
      (SETF VALUE (RSHIFT (CIRCUIT::HZ) 3))
      (PRINC (FORMAT NIL "~A -> ~A~%" "ib" VALUE)))
    VALUE)) 
(DEFUN CIRCUIT::DR () (MY-NOT (CIRCUIT::DQ))) 
(DEFUN CIRCUIT::FH () (MY-NOT (CIRCUIT::FG))) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::DZ ()
    (WHEN (NULL VALUE)
      (SETF VALUE (RSHIFT (CIRCUIT::DY) 2))
      (PRINC (FORMAT NIL "~A -> ~A~%" "dz" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::KL ()
    (WHEN (NULL VALUE)
      (SETF VALUE (RSHIFT (CIRCUIT::KK) 2))
      (PRINC (FORMAT NIL "~A -> ~A~%" "kl" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::FJ ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND 1 (CIRCUIT::FI)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "fj" VALUE)))
    VALUE)) 
(DEFUN CIRCUIT::HS () (MY-NOT (CIRCUIT::HR))) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::KI ()
    (WHEN (NULL VALUE)
      (SETF VALUE (RSHIFT (CIRCUIT::JP) 1))
      (PRINC (FORMAT NIL "~A -> ~A~%" "ki" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::BN ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGIOR (CIRCUIT::BL) (CIRCUIT::BM)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "bn" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::GZ ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND 1 (CIRCUIT::GY)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "gz" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::GU ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::GR) (CIRCUIT::GT)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "gu" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::DD ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGIOR (CIRCUIT::DB) (CIRCUIT::DC)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "dd" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::DL ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGIOR (CIRCUIT::DE) (CIRCUIT::DK)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "dl" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::AV ()
    (WHEN (NULL VALUE)
      (SETF VALUE (RSHIFT (CIRCUIT::AS) 5))
      (PRINC (FORMAT NIL "~A -> ~A~%" "av" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::LI ()
    (WHEN (NULL VALUE)
      (SETF VALUE (RSHIFT (CIRCUIT::LF) 5))
      (PRINC (FORMAT NIL "~A -> ~A~%" "li" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::HP ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::HM) (CIRCUIT::HO)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "hp" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::CI ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGIOR (CIRCUIT::CG) (CIRCUIT::CH)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "ci" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::GW ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::GJ) (CIRCUIT::GU)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "gw" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::GI ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LSHIFT (CIRCUIT::GE) 15))
      (PRINC (FORMAT NIL "~A -> ~A~%" "gi" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::G ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGIOR (CIRCUIT::E) (CIRCUIT::F)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "g" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::FW ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGIOR (CIRCUIT::FP) (CIRCUIT::FV)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "fw" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::FE ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::FB) (CIRCUIT::FD)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "fe" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::CH ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LSHIFT (CIRCUIT::CD) 15))
      (PRINC (FORMAT NIL "~A -> ~A~%" "ch" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::V ()
    (WHEN (NULL VALUE)
      (SETF VALUE (RSHIFT (CIRCUIT::B) 1))
      (PRINC (FORMAT NIL "~A -> ~A~%" "v" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::BA ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGIOR (CIRCUIT::AT) (CIRCUIT::AZ)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "ba" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::BO ()
    (WHEN (NULL VALUE)
      (SETF VALUE (RSHIFT (CIRCUIT::BN) 2))
      (PRINC (FORMAT NIL "~A -> ~A~%" "bo" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::LK ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::LH) (CIRCUIT::LI)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "lk" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::DO ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::DL) (CIRCUIT::DN)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "do" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::EJ ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::EG) (CIRCUIT::EI)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "ej" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::FA ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::EX) (CIRCUIT::EZ)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "fa" VALUE)))
    VALUE)) 
(DEFUN CIRCUIT::KQ () (MY-NOT (CIRCUIT::KP))) 
(DEFUN CIRCUIT::LL () (MY-NOT (CIRCUIT::LK))) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::AK ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::X) (CIRCUIT::AI)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "ak" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::KB ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGIOR (CIRCUIT::JP) (CIRCUIT::KA)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "kb" VALUE)))
    VALUE)) 
(DEFUN CIRCUIT::JE () (MY-NOT (CIRCUIT::JD))) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::JB ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::IY) (CIRCUIT::JA)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "jb" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::JR ()
    (WHEN (NULL VALUE)
      (SETF VALUE (RSHIFT (CIRCUIT::JP) 3))
      (PRINC (FORMAT NIL "~A -> ~A~%" "jr" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::GA ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGIOR (CIRCUIT::FO) (CIRCUIT::FZ)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "ga" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::DH ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGIOR (CIRCUIT::DF) (CIRCUIT::DG)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "dh" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::GK ()
    (WHEN (NULL VALUE)
      (SETF VALUE (RSHIFT (CIRCUIT::GJ) 2))
      (PRINC (FORMAT NIL "~A -> ~A~%" "gk" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::GV ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGIOR (CIRCUIT::GJ) (CIRCUIT::GU)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "gv" VALUE)))
    VALUE)) 
(DEFUN CIRCUIT::JI () (MY-NOT (CIRCUIT::JH))) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::BJ ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LSHIFT (CIRCUIT::AP) 1))
      (PRINC (FORMAT NIL "~A -> ~A~%" "bj" VALUE)))
    VALUE)) 
(DEFUN CIRCUIT::LT () (MY-NOT (CIRCUIT::LS))) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::JL ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LSHIFT (CIRCUIT::IR) 1))
      (PRINC (FORMAT NIL "~A -> ~A~%" "jl" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::CA ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::BN) (CIRCUIT::BY)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "ca" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::LZ ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LSHIFT (CIRCUIT::LV) 15))
      (PRINC (FORMAT NIL "~A -> ~A~%" "lz" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::BD ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::BA) (CIRCUIT::BC)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "bd" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::DC ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LSHIFT (CIRCUIT::CY) 15))
      (PRINC (FORMAT NIL "~A -> ~A~%" "dc" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::LQ ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::LN) (CIRCUIT::LP)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "lq" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::AQ ()
    (WHEN (NULL VALUE)
      (SETF VALUE (RSHIFT (CIRCUIT::X) 1))
      (PRINC (FORMAT NIL "~A -> ~A~%" "aq" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::GR ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGIOR (CIRCUIT::GK) (CIRCUIT::GQ)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "gr" VALUE)))
    VALUE)) 
(DEFUN CIRCUIT::KY () (MY-NOT (CIRCUIT::KX))) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::JJ ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::JG) (CIRCUIT::JI)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "jj" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::BZ ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGIOR (CIRCUIT::BN) (CIRCUIT::BY)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "bz" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::GF ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LSHIFT (CIRCUIT::FL) 1))
      (PRINC (FORMAT NIL "~A -> ~A~%" "gf" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::BR ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGIOR (CIRCUIT::BP) (CIRCUIT::BQ)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "br" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::HQ ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGIOR (CIRCUIT::HE) (CIRCUIT::HP)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "hq" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::EW ()
    (WHEN (NULL VALUE)
      (SETF VALUE (RSHIFT (CIRCUIT::ET) 5))
      (PRINC (FORMAT NIL "~A -> ~A~%" "ew" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::IV ()
    (WHEN (NULL VALUE)
      (SETF VALUE (RSHIFT (CIRCUIT::IU) 2))
      (PRINC (FORMAT NIL "~A -> ~A~%" "iv" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::GO ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::GL) (CIRCUIT::GM)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "go" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::AJ ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGIOR (CIRCUIT::X) (CIRCUIT::AI)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "aj" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::HE ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGIOR (CIRCUIT::HC) (CIRCUIT::HD)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "he" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::LO ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::LG) (CIRCUIT::LM)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "lo" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::LJ ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGIOR (CIRCUIT::LH) (CIRCUIT::LI)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "lj" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::DU ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LSHIFT (CIRCUIT::DA) 1))
      (PRINC (FORMAT NIL "~A -> ~A~%" "du" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::FP ()
    (WHEN (NULL VALUE)
      (SETF VALUE (RSHIFT (CIRCUIT::FO) 2))
      (PRINC (FORMAT NIL "~A -> ~A~%" "fp" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::GS ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::GK) (CIRCUIT::GQ)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "gs" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::BK ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGIOR (CIRCUIT::BJ) (CIRCUIT::BI)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "bk" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::LR ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGIOR (CIRCUIT::LF) (CIRCUIT::LQ)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "lr" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::CR ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::CJ) (CIRCUIT::CP)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "cr" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::HY ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LSHIFT (CIRCUIT::HU) 15))
      (PRINC (FORMAT NIL "~A -> ~A~%" "hy" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::BI ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND 1 (CIRCUIT::BH)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "bi" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::FQ ()
    (WHEN (NULL VALUE)
      (SETF VALUE (RSHIFT (CIRCUIT::FO) 3))
      (PRINC (FORMAT NIL "~A -> ~A~%" "fq" VALUE)))
    VALUE)) 
(DEFUN CIRCUIT::LP () (MY-NOT (CIRCUIT::LO))) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::IQ ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LSHIFT (CIRCUIT::HW) 1))
      (PRINC (FORMAT NIL "~A -> ~A~%" "iq" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::DW ()
    (WHEN (NULL VALUE)
      (SETF VALUE (RSHIFT (CIRCUIT::DD) 1))
      (PRINC (FORMAT NIL "~A -> ~A~%" "dw" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::DX ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LSHIFT (CIRCUIT::DT) 15))
      (PRINC (FORMAT NIL "~A -> ~A~%" "dx" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::EL ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::DY) (CIRCUIT::EJ)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "el" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::AR ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LSHIFT (CIRCUIT::AN) 15))
      (PRINC (FORMAT NIL "~A -> ~A~%" "ar" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::AS ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGIOR (CIRCUIT::AQ) (CIRCUIT::AR)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "as" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::S ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND 1 (CIRCUIT::R)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "s" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::FZ ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::FW) (CIRCUIT::FY)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "fz" VALUE)))
    VALUE)) 
(DEFUN CIRCUIT::IN () (MY-NOT (CIRCUIT::IM))) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::EV ()
    (WHEN (NULL VALUE)
      (SETF VALUE (RSHIFT (CIRCUIT::ET) 3))
      (PRINC (FORMAT NIL "~A -> ~A~%" "ev" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::DT ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND 1 (CIRCUIT::DS)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "dt" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::EF ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::EC) (CIRCUIT::EE)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "ef" VALUE)))
    VALUE)) 
(DEFUN CIRCUIT::AL () (MY-NOT (CIRCUIT::AK))) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::JM ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGIOR (CIRCUIT::JL) (CIRCUIT::JK)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "jm" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::EO ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND 1 (CIRCUIT::EN)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "eo" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::LC ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGIOR (CIRCUIT::LB) (CIRCUIT::LA)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "lc" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::JH ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::IU) (CIRCUIT::JF)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "jh" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::IX ()
    (WHEN (NULL VALUE)
      (SETF VALUE (RSHIFT (CIRCUIT::IU) 5))
      (PRINC (FORMAT NIL "~A -> ~A~%" "ix" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::BW ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::BO) (CIRCUIT::BU)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "bw" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::DA ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGIOR (CIRCUIT::CZ) (CIRCUIT::CY)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "da" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::JD ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::IV) (CIRCUIT::JB)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "jd" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::IZ ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::IW) (CIRCUIT::IX)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "iz" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::LY ()
    (WHEN (NULL VALUE)
      (SETF VALUE (RSHIFT (CIRCUIT::LF) 1))
      (PRINC (FORMAT NIL "~A -> ~A~%" "ly" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::JG ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGIOR (CIRCUIT::IU) (CIRCUIT::JF)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "jg" VALUE)))
    VALUE)) 
(DEFUN CIRCUIT::DN () (MY-NOT (CIRCUIT::DM))) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::LX ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGIOR (CIRCUIT::LW) (CIRCUIT::LV)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "lx" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::HA ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LSHIFT (CIRCUIT::GG) 1))
      (PRINC (FORMAT NIL "~A -> ~A~%" "ha" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::LU ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::LR) (CIRCUIT::LT)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "lu" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::FO ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGIOR (CIRCUIT::FM) (CIRCUIT::FN)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "fo" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::HG ()
    (WHEN (NULL VALUE)
      (SETF VALUE (RSHIFT (CIRCUIT::HE) 3))
      (PRINC (FORMAT NIL "~A -> ~A~%" "hg" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::AM ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::AJ) (CIRCUIT::AL)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "am" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::LA ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND 1 (CIRCUIT::KZ)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "la" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::EB ()
    (WHEN (NULL VALUE)
      (SETF VALUE (RSHIFT (CIRCUIT::DY) 5))
      (PRINC (FORMAT NIL "~A -> ~A~%" "eb" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::JF ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::JC) (CIRCUIT::JE)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "jf" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::CP ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::CM) (CIRCUIT::CO)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "cp" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::GY ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::GV) (CIRCUIT::GX)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "gy" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::EX ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGIOR (CIRCUIT::EV) (CIRCUIT::EW)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "ex" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::KC ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::JP) (CIRCUIT::KA)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "kc" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::FL ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGIOR (CIRCUIT::FK) (CIRCUIT::FJ)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "fl" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::EA ()
    (WHEN (NULL VALUE)
      (SETF VALUE (RSHIFT (CIRCUIT::DY) 3))
      (PRINC (FORMAT NIL "~A -> ~A~%" "ea" VALUE)))
    VALUE)) 
(DEFUN CIRCUIT::BT () (MY-NOT (CIRCUIT::BS))) 
(DEFUN CIRCUIT::AH () (MY-NOT (CIRCUIT::AG))) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::EH ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::DZ) (CIRCUIT::EF)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "eh" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::CZ ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LSHIFT (CIRCUIT::CF) 1))
      (PRINC (FORMAT NIL "~A -> ~A~%" "cz" VALUE)))
    VALUE)) 
(DEFUN CIRCUIT::CW () (MY-NOT (CIRCUIT::CV))) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::CY ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND 1 (CIRCUIT::CX)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "cy" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::DM ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::DE) (CIRCUIT::DK)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "dm" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::CN ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::CK) (CIRCUIT::CL)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "cn" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::AA ()
    (WHEN (NULL VALUE)
      (SETF VALUE (RSHIFT (CIRCUIT::X) 5))
      (PRINC (FORMAT NIL "~A -> ~A~%" "aa" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::EP ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LSHIFT (CIRCUIT::DV) 1))
      (PRINC (FORMAT NIL "~A -> ~A~%" "ep" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::HF ()
    (WHEN (NULL VALUE)
      (SETF VALUE (RSHIFT (CIRCUIT::HE) 2))
      (PRINC (FORMAT NIL "~A -> ~A~%" "hf" VALUE)))
    VALUE)) 
(DEFUN CIRCUIT::BX () (MY-NOT (CIRCUIT::BW))) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::CM ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGIOR (CIRCUIT::CK) (CIRCUIT::CL)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "cm" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::BS ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::BP) (CIRCUIT::BQ)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "bs" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::BE ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGIOR (CIRCUIT::AS) (CIRCUIT::BD)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "be" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::HR ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::HE) (CIRCUIT::HP)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "hr" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::EY ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::EV) (CIRCUIT::EW)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "ey" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::LV ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND 1 (CIRCUIT::LU)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "lv" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::KM ()
    (WHEN (NULL VALUE)
      (SETF VALUE (RSHIFT (CIRCUIT::KK) 3))
      (PRINC (FORMAT NIL "~A -> ~A~%" "km" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::P ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::B) (CIRCUIT::N)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "p" VALUE)))
    VALUE)) 
(DEFUN CIRCUIT::KD () (MY-NOT (CIRCUIT::KC))) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::LW ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LSHIFT (CIRCUIT::LC) 1))
      (PRINC (FORMAT NIL "~A -> ~A~%" "lw" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::KO ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGIOR (CIRCUIT::KM) (CIRCUIT::KN)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "ko" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::IG ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::ID) (CIRCUIT::IF)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "ig" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::IK ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::IH) (CIRCUIT::IJ)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "ik" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::JU ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::JR) (CIRCUIT::JS)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "ju" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::CL ()
    (WHEN (NULL VALUE)
      (SETF VALUE (RSHIFT (CIRCUIT::CI) 5))
      (PRINC (FORMAT NIL "~A -> ~A~%" "cl" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::IS ()
    (WHEN (NULL VALUE)
      (SETF VALUE (RSHIFT (CIRCUIT::HZ) 1))
      (PRINC (FORMAT NIL "~A -> ~A~%" "is" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::KF ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND 1 (CIRCUIT::KE)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "kf" VALUE)))
    VALUE)) 
(DEFUN CIRCUIT::GT () (MY-NOT (CIRCUIT::GS))) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::AZ ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::AW) (CIRCUIT::AY)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "az" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::Y ()
    (WHEN (NULL VALUE)
      (SETF VALUE (RSHIFT (CIRCUIT::X) 2))
      (PRINC (FORMAT NIL "~A -> ~A~%" "y" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::AE ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::AB) (CIRCUIT::AD)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "ae" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::FI ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::FF) (CIRCUIT::FH)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "fi" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::CV ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::CI) (CIRCUIT::CT)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "cv" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::FK ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LSHIFT (CIRCUIT::EQ) 1))
      (PRINC (FORMAT NIL "~A -> ~A~%" "fk" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::GL ()
    (WHEN (NULL VALUE)
      (SETF VALUE (RSHIFT (CIRCUIT::GJ) 3))
      (PRINC (FORMAT NIL "~A -> ~A~%" "gl" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::AO ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LSHIFT (CIRCUIT::U) 1))
      (PRINC (FORMAT NIL "~A -> ~A~%" "ao" VALUE)))
    VALUE)) 
(DEFUN CIRCUIT::BC () (MY-NOT (CIRCUIT::BB))) 
(DEFUN CIRCUIT::HK () (MY-NOT (CIRCUIT::HJ))) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::KZ ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::KW) (CIRCUIT::KY)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "kz" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::BF ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::AS) (CIRCUIT::BD)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "bf" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::DY ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGIOR (CIRCUIT::DW) (CIRCUIT::DX)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "dy" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::BU ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::BR) (CIRCUIT::BT)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "bu" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::KX ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::KK) (CIRCUIT::KV)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "kx" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::EQ ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGIOR (CIRCUIT::EP) (CIRCUIT::EO)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "eq" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::HX ()
    (WHEN (NULL VALUE)
      (SETF VALUE (RSHIFT (CIRCUIT::HE) 1))
      (PRINC (FORMAT NIL "~A -> ~A~%" "hx" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::KK ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGIOR (CIRCUIT::KI) (CIRCUIT::KJ)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "kk" VALUE)))
    VALUE)) 
(DEFUN CIRCUIT::JV () (MY-NOT (CIRCUIT::JU))) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::EN ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::EK) (CIRCUIT::EM)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "en" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::KN ()
    (WHEN (NULL VALUE)
      (SETF VALUE (RSHIFT (CIRCUIT::KK) 5))
      (PRINC (FORMAT NIL "~A -> ~A~%" "kn" VALUE)))
    VALUE)) 
(DEFUN CIRCUIT::EI () (MY-NOT (CIRCUIT::EH))) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::HZ ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGIOR (CIRCUIT::HX) (CIRCUIT::HY)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "hz" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::EC ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGIOR (CIRCUIT::EA) (CIRCUIT::EB)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "ec" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::W ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LSHIFT (CIRCUIT::S) 15))
      (PRINC (FORMAT NIL "~A -> ~A~%" "w" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::GH ()
    (WHEN (NULL VALUE)
      (SETF VALUE (RSHIFT (CIRCUIT::FO) 1))
      (PRINC (FORMAT NIL "~A -> ~A~%" "gh" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::KW ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGIOR (CIRCUIT::KK) (CIRCUIT::KV)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "kw" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::BQ ()
    (WHEN (NULL VALUE)
      (SETF VALUE (RSHIFT (CIRCUIT::BN) 5))
      (PRINC (FORMAT NIL "~A -> ~A~%" "bq" VALUE)))
    VALUE)) 
(DEFUN CIRCUIT::EE () (MY-NOT (CIRCUIT::ED))) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::HU ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND 1 (CIRCUIT::HT)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "hu" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::CX ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::CU) (CIRCUIT::CW)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "cx" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::F ()
    (WHEN (NULL VALUE)
      (SETF VALUE (RSHIFT (CIRCUIT::B) 5))
      (PRINC (FORMAT NIL "~A -> ~A~%" "f" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::KT ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::KL) (CIRCUIT::KR)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "kt" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::IR ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGIOR (CIRCUIT::IQ) (CIRCUIT::IP)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "ir" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::CJ ()
    (WHEN (NULL VALUE)
      (SETF VALUE (RSHIFT (CIRCUIT::CI) 2))
      (PRINC (FORMAT NIL "~A -> ~A~%" "cj" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::CQ ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGIOR (CIRCUIT::CJ) (CIRCUIT::CP)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "cq" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::R ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::O) (CIRCUIT::Q)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "r" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::DG ()
    (WHEN (NULL VALUE)
      (SETF VALUE (RSHIFT (CIRCUIT::DD) 5))
      (PRINC (FORMAT NIL "~A -> ~A~%" "dg" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::D ()
    (WHEN (NULL VALUE)
      (SETF VALUE (RSHIFT (CIRCUIT::B) 2))
      (PRINC (FORMAT NIL "~A -> ~A~%" "d" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::KV ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::KS) (CIRCUIT::KU)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "kv" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::E ()
    (WHEN (NULL VALUE)
      (SETF VALUE (RSHIFT (CIRCUIT::B) 3))
      (PRINC (FORMAT NIL "~A -> ~A~%" "e" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::K ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGIOR (CIRCUIT::D) (CIRCUIT::J)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "k" VALUE)))
    VALUE)) 
(DEFUN CIRCUIT::Q () (MY-NOT (CIRCUIT::P))) 
(DEFUN CIRCUIT::CS () (MY-NOT (CIRCUIT::CR))) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::DV ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGIOR (CIRCUIT::DU) (CIRCUIT::DT)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "dv" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::KJ ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LSHIFT (CIRCUIT::KF) 15))
      (PRINC (FORMAT NIL "~A -> ~A~%" "kj" VALUE)))
    VALUE)) 
(DEFUN CIRCUIT::AD () (MY-NOT (CIRCUIT::AC))) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::FR ()
    (WHEN (NULL VALUE)
      (SETF VALUE (RSHIFT (CIRCUIT::FO) 5))
      (PRINC (FORMAT NIL "~A -> ~A~%" "fr" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::IL ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGIOR (CIRCUIT::HZ) (CIRCUIT::IK)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "il" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::KA ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::JX) (CIRCUIT::JZ)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "ka" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::GJ ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGIOR (CIRCUIT::GH) (CIRCUIT::GI)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "gj" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::LD ()
    (WHEN (NULL VALUE)
      (SETF VALUE (RSHIFT (CIRCUIT::KK) 1))
      (PRINC (FORMAT NIL "~A -> ~A~%" "ld" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::IC ()
    (WHEN (NULL VALUE)
      (SETF VALUE (RSHIFT (CIRCUIT::HZ) 5))
      (PRINC (FORMAT NIL "~A -> ~A~%" "ic" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::AT ()
    (WHEN (NULL VALUE)
      (SETF VALUE (RSHIFT (CIRCUIT::AS) 2))
      (PRINC (FORMAT NIL "~A -> ~A~%" "at" VALUE)))
    VALUE)) 
(DEFUN CIRCUIT::JZ () (MY-NOT (CIRCUIT::JY))) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::AN ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND 1 (CIRCUIT::AM)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "an" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::CU ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGIOR (CIRCUIT::CI) (CIRCUIT::CT)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "cu" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::HJ ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::HG) (CIRCUIT::HH)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "hj" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::JX ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGIOR (CIRCUIT::JQ) (CIRCUIT::JW)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "jx" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::X ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGIOR (CIRCUIT::V) (CIRCUIT::W)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "x" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::LE ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LSHIFT (CIRCUIT::LA) 15))
      (PRINC (FORMAT NIL "~A -> ~A~%" "le" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::DK ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::DH) (CIRCUIT::DJ)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "dk" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::DS ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::DP) (CIRCUIT::DR)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "ds" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::JY ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::JQ) (CIRCUIT::JW)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "jy" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::AW ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGIOR (CIRCUIT::AU) (CIRCUIT::AV)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "aw" VALUE)))
    VALUE)) 
(DEFUN CIRCUIT::BG () (MY-NOT (CIRCUIT::BF))) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::AB ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGIOR (CIRCUIT::Z) (CIRCUIT::AA)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "ab" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::GD ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::GA) (CIRCUIT::GC)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "gd" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::IM ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::HZ) (CIRCUIT::IK)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "im" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::JW ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::JT) (CIRCUIT::JV)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "jw" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::AC ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::Z) (CIRCUIT::AA)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "ac" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::JT ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGIOR (CIRCUIT::JR) (CIRCUIT::JS)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "jt" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::HV ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LSHIFT (CIRCUIT::HB) 1))
      (PRINC (FORMAT NIL "~A -> ~A~%" "hv" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::HM ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGIOR (CIRCUIT::HF) (CIRCUIT::HL)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "hm" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::ID ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGIOR (CIRCUIT::IB) (CIRCUIT::IC)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "id" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::FS ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGIOR (CIRCUIT::FQ) (CIRCUIT::FR)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "fs" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::CT ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::CQ) (CIRCUIT::CS)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "ct" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::IH ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGIOR (CIRCUIT::IA) (CIRCUIT::IG)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "ih" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::DP ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGIOR (CIRCUIT::DD) (CIRCUIT::DO)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "dp" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::L ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::D) (CIRCUIT::J)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "l" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::IE ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::IB) (CIRCUIT::IC)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "ie" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::AU ()
    (WHEN (NULL VALUE)
      (SETF VALUE (RSHIFT (CIRCUIT::AS) 3))
      (PRINC (FORMAT NIL "~A -> ~A~%" "au" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::BH ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::BE) (CIRCUIT::BG)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "bh" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::DQ ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::DD) (CIRCUIT::DO)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "dq" VALUE)))
    VALUE)) 
(DEFUN CIRCUIT::M () (MY-NOT (CIRCUIT::L))) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::GE ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND 1 (CIRCUIT::GD)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "ge" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::AG ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::Y) (CIRCUIT::AE)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "ag" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::GB ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::FO) (CIRCUIT::FZ)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "gb" VALUE)))
    VALUE)) 
(DEFUN CIRCUIT::IF () (MY-NOT (CIRCUIT::IE))) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::H ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::E) (CIRCUIT::F)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "h" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::Z ()
    (WHEN (NULL VALUE)
      (SETF VALUE (RSHIFT (CIRCUIT::X) 3))
      (PRINC (FORMAT NIL "~A -> ~A~%" "z" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::AF ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGIOR (CIRCUIT::Y) (CIRCUIT::AE)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "af" VALUE)))
    VALUE)) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::HN ()
    (WHEN (NULL VALUE)
      (SETF VALUE (LOGAND (CIRCUIT::HF) (CIRCUIT::HL)))
      (PRINC (FORMAT NIL "~A -> ~A~%" "hn" VALUE)))
    VALUE)) 
(DEFUN CIRCUIT::I () (MY-NOT (CIRCUIT::H))) 
(DEFUN CIRCUIT::HO () (MY-NOT (CIRCUIT::HN))) 
(LET ((VALUE NIL))
  (DEFUN CIRCUIT::HH ()
    (WHEN (NULL VALUE)
      (SETF VALUE (RSHIFT (CIRCUIT::HE) 5))
      (PRINC (FORMAT NIL "~A -> ~A~%" "hh" VALUE)))
    VALUE)) 

(print (circuit::a))
